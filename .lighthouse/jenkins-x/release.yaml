# Tekton PipelineRun 资源定义
# 用于处理正式版本发布的流水线配置
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: release    # 流水线运行的名称，用于发布流程
spec:
  # 定义流水线级别的参数
  params:
    - name: repo_url
      value: https://github.com/DaleWYZ/jx-deploy-test-1221.git
    - name: revision
      value: master
    - name: PULL_BASE_SHA
      value: $(params.revision)
  pipelineSpec:
    # 声明流水线需要的参数
    params:
      - name: repo_url
        type: string
        description: "代码仓库的 URL"
      - name: revision
        type: string
        description: "要检出的分支或提交"
      - name: PULL_BASE_SHA
        type: string
        description: "当前提交的 SHA"
    workspaces:
      - name: shared-data
    tasks:
    # 主要任务定义，包含了从构建到发布的完整流程
    - name: from-build-pack
      params:
        - name: repo_url
          value: $(params.repo_url)
        - name: revision
          value: $(params.revision)
        - name: PULL_BASE_SHA
          value: $(params.PULL_BASE_SHA)
      workspaces:
        - name: shared-data
          workspace: shared-data
      taskSpec:
        workspaces:
          - name: shared-data
            description: "用于在步骤之间共享数据的工作空间"
        params:
          - name: repo_url
            type: string
          - name: revision
            type: string
          - name: PULL_BASE_SHA
            type: string
        stepTemplate:
          # 使用 golang 1.21 作为基础镜像
          image: golang:1.21
          name: ""
          # 定义资源限制和请求
          resources:
            # 最小资源请求
            requests:
              cpu: 400m        # 请求 0.4 核 CPU
              memory: 600Mi    # 请求 600MB 内存
            # 最大资源限制
            limits:
              cpu: "1"         # 最多使用 1 核 CPU
              memory: "2Gi"    # 最多使用 2GB 内存
          # 设置工作目录
          workingDir: $(workspaces.shared-data.path)
          # 环境变量配置
          env:
            # Docker 镜像仓库地址
            - name: DOCKER_REGISTRY
              value: harbor.corp.angoo.io
            # 应用名称
            - name: APP_NAME
              value: timelogger
        # 定义具体的执行步骤
        steps:
        # 步骤1: 克隆代码
        - image: alpine/git:v2.30.2  # 使用轻量级的 git 镜像
          name: git-clone
          script: |
            git clone $(params.repo_url) .      # 克隆代码到当前目录
            git checkout $(params.revision)      # 切换到指定的分支或提交

        # 步骤2: 生成下一个版本号
        - name: next-version
          image: gcr.io/jenkinsxio/jx-release-version:2.2.3  # 使用 JX 版本管理工具
          script: |
            # 生成版本号并保存到文件
            jx-release-version > $(workspaces.shared-data.path)/VERSION

        # 步骤3: 构建应用
        - name: build-make-build
          command:
            - make
            - build    # 执行 make build 命令构建应用

        # 步骤4: 构建生产环境容器镜像
        - name: build-container-build
          script: |
            export VERSION=$(cat $(workspaces.shared-data.path)/VERSION)
            skaffold build -p release

        # 步骤5: 生成变更日志
        - name: promote-changelog
          script: |
            export VERSION=$(cat $(workspaces.shared-data.path)/VERSION)
            jx changelog create \
              --verbose \
              --header-file=hack/changelog-header.md \
              --version=$VERSION \
              --rev=$(params.PULL_BASE_SHA) \
              --output-markdown=changelog.md \
              --update-release=false

        # 步骤6: 部署到生产环境
        - name: promote-helm-release
          script: |
            export VERSION=$(cat $(workspaces.shared-data.path)/VERSION)
            jx promote \
              --app timelogger \
              --version $VERSION \
              --env production

  # 工作空间配置
  workspaces:
    - name: shared-data
      emptyDir: {}
  # Pod 相关配置
  podTemplate: {}
  # 使用的服务账号
  serviceAccountName: tekton-bot
  # 流水线超时时间（12小时）
  timeout: 12h0m0s
# 状态字段（初始为空）
status: {}
