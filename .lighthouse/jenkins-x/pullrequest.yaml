# Tekton PipelineRun 资源定义
# 用于处理 Pull Request 的流水线配置
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: pullrequest  # 流水线运行的名称
spec:
  pipelineSpec:
    tasks:
    # 主要任务定义
    - name: from-build-pack
      resources: {}
      taskSpec:
        metadata: {}
        # 定义所有步骤的通用模板配置
        stepTemplate:
          # 使用 golang 1.21 作为基础镜像
          image: golang:1.21
          name: ""
          # 定义资源限制和请求
          resources:
            # 最小资源请求
            requests:
              cpu: 400m        # 请求 0.4 核 CPU
              memory: 600Mi    # 请求 600MB 内存
            # 最大资源限制
            limits:
              cpu: "1"         # 最多使用 1 核 CPU
              memory: "2Gi"    # 最多使用 2GB 内存
          # 设置工作目录
          workingDir: /workspace/source
          # 环境变量配置
          env:
            # Docker 镜像仓库地址
            - name: DOCKER_REGISTRY
              value: harbor.corp.angoo.io
            # 应用名称
            - name: APP_NAME
              value: timelogger
        # 定义具体的执行步骤
        steps:
        # 步骤1: 克隆代码
        - image: alpine/git:v2.30.2  # 使用轻量级的 git 镜像
          name: git-clone
          script: |
            git clone $(params.repo_url) .      # 克隆代码到当前目录
            git checkout $(params.revision)      # 切换到指定的分支或提交
        
        # 步骤2: 构建应用
        - name: build-make-linux
          command:
            - make
            - build    # 执行 make build 命令构建应用
        
        # 步骤3: 构建容器镜像
        - name: build-container-build
          command:
            - skaffold
            - build    # 使用 skaffold 构建容器镜像
        
        # 步骤4: 部署预览环境
        - name: promote-jx-preview
          command:
            - jx
            - preview           # 创建预览环境
            - --app timelogger  # 指定应用名称
            - --dir ../..      # 指定应用目录
  
  # Pod 相关配置
  podTemplate: {}
  # 使用的服务账号
  serviceAccountName: tekton-bot
  # 流水线超时时间
  timeout: 12h0m0s
# 状态字段（初始为空）
status: {}
